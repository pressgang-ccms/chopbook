#! /bin/python

# Core Python modules
import shutil
import copy
import sys
import os
import re
import json
import htmlentitydefs
import base64
import time

# Other Python modules
from lxml import etree
from lxml.etree import tostring
from lxml.etree import fromstring
from progressbar import ProgressBar, Bar, Percentage
import httplib2

### FUNCTIONS

## Basic Housekeeping Functions

# Append an entry to the logfile
def logentry (file, message):
  logfile = open(file, "a+")
  logfile.write (time.strftime("%Y-%m-%d - %H:%M:%S") + " - " + message + "\n")
  logfile.close()

# Get the depth of a part/chapter/appendix/section
def depth(node):
  node_depth = 0
  while node is not None:
    node_depth += 1
    node = node.getparent()
  return node_depth

# Load an xml file
def loadxml(file, properties):
  xml = etree.parse(file, properties)
  return xml

# Generate an entire XML doc with xincludes
def xixml(xml):
  try:
    xml.xinclude()
  except:
    pass
  return xml

# Loading a setting from a file (used with publican.cfg)
def loadsetting(file, setting):
  config = open(file, 'r')
  for configitem in config:
    if configitem.startswith(setting):
      return configitem.split(':')[1]

# Strip tags (the lxml strip_tags function doesn't work exactly the way I want it to)
def tagstrip(string):
  return re.sub('<[^<]+?>', '', string)

# Get rid of additional whitespace
def cleanline(string):
  return " ".join(string.split())

# Re-encode special character codes to their names (e.g. &#160; to &nbsp;)
def reencode(string):
  for code,name in htmlentitydefs.codepoint2name.items():
    string = re.sub('&#'+str(code)+';', '&'+name+';', string)
  return string

# Parent function to convert and sanitize and xml etree object into a string
def xmltostring(xml):
  string = tostring(xml)
  string = tagstrip(string)
  string = cleanline(string)
  string = reencode(string)
  return string

## Main Chopbook Functions

# Get data from Book_Info.xml and publican.cfg and save it to a list. This forms the top part of a content spec.
def getbookinfo():
  bookinfo = etree.parse('en-US/Book_Info.xml', properties).getroot()
  try:
    bookinfo.xinclude()
  except:
    pass
  abstract = bookinfo.find("abstract")
  comments = abstract.xpath('//comment()')
  for comment in comments:
    parent = comment.getparent()
    parent.remove(comment)
  etree.strip_tags (abstract, "*")
  abstract = xmltostring(abstract)
  cspec = []
  file = ('./publican.cfg')
  cspec.extend ([
    "# Book_Info.xml content",
    "Title = " + xmltostring(bookinfo.find("title")) if bookinfo.find("title").text is not None else "Title = ",
    "Subtitle = " + xmltostring(bookinfo.find("subtitle")) if bookinfo.find("subtitle").text is not None else "Subtitle = ",
    "Abstract = " + abstract,
    "Product = " + xmltostring(bookinfo.find("productname")) if bookinfo.find("productname").text is not None else "Product = ",
    "Version = " + xmltostring(bookinfo.find("productnumber")) if bookinfo.find("productnumber").text is not None else "Version = 1",
    "Edition = " + xmltostring(bookinfo.find("edition")) if bookinfo.find("edition").text is not None else "Edition = ",
    "DTD = Docbook 4.5",
    "Copyright Holder = Red Hat",
    "",
    "# publican.cfg content",
    "Brand = " + loadsetting(file, "brand:"),
    "publican.cfg = [",
    "xml_lang: en-US",
    "git_branch: docs-rhel-6",
    "]"
    ""
  ])
  return cspec

# Create a topic. If dry run is enabled, don't save it; just return "xxxxx"
def createtopic(topicxml, dryrun, h):
  notes = ""
  id = []
  section_empty = False
  topic_title = topicxml.find("title")
  title = xmltostring(topic_title)
  if "id" in topicxml.attrib: id.append(topicxml.attrib["id"])
  all_elements = topicxml.findall("*")
  for find_id in all_elements:
    if "id" in find_id.attrib: id.append(find_id.attrib['id'])
  if len(id) == 0: id.append("None")
  xrefs = topicxml.iter("xref")
  if topicxml.tag == "part":
    topicxml = topicxml.find("partintro")
    topicxml.insert(0, topic_title)
  topicxml.tag = "section"
  if dryrun is not True:
    sendobj = {'title': title, 'description': title, 'xml': reencode(tostring(topicxml)), 'locale': 'en-US', 'configuredParameters': [ 'title','description','xml','locale']};
    result = json.dumps(sendobj, indent=2)
    resp, content = h.request('http://' + pressgang_host + ':8080/pressgang-ccms/rest/1/topic/create/json?message=Initial+Topic+Creation&flag=2&userId=89', method="POST", body=result, headers={'Content-Type':'application/json'})
    if resp['status'] == '200':
      topicid = json.loads(content)['id']
    else:
      print "Error: Bad Connection to Pressgang CCMS (Error code: " + resp['status'] + ")"
      exit ()
  else:
    topicid = "xxxxx"
  return topicid, title, id

def gettopic(topicid, h):
  resp, content = h.request('http://' + pressgang_host + ':8080/pressgang-ccms/rest/1/topic/get/json/' + str(topicid) + '/', method="GET");
  if resp['status'] == '200':
    obj = json.loads(content)
    xml = obj['xml']
  else:
    print "Error: Invalid topic ID or faulty connection to SkyNet"
    exit ()
  return xml

def puttopic(topicid, xml, h):
  sendobj = {'id': topicid, 'xml': xml, 'configuredParameters': [ 'xml']}
  result = json.dumps(sendobj, indent=2)
  putresp, putcontent = h.request('http://' + pressgang_host + ':8080/pressgang-ccms/rest/1/topic/update/json/', method="POST", body=result, headers={'content-type':'application/json'})
  if putresp['status'] == '200':
    message = "Topic " + str(topicid) + " updated"
  else:
    message = "Error "+putresp['status']
  return message

# Upload all images in a book
def uploadimages (xml, h, logfile):
  cspec = []
  imagearray = {}
  xml = tostring(xml)
  cspec.append("# Uploading images")
  filenames = re.compile(r'images/.*\.png')
  images = filenames.findall(xml)
  total_progress = len(images)
  # print "Uploading images..."
  print "Uploading " + str(total_progress) + " images..."
  pbar = ProgressBar(widgets=[Percentage(), Bar()], maxval=total_progress + 1).start()
  current_progress = 1
  for image in images:
    try:
      file = open("en-US/" + image, "rb")
    except:
      logentry (logfile, "File not found: " + image)
    else:
      logentry (logfile, "Uploading " + str(image) )
      encoded_string = base64.b64encode(file.read())
      sendobj = {"description": image, "languageImages_OTM": {"items": [ { "item":{ "imageData": encoded_string, "locale":"en-US", "filename":image, "configuredParameters":[ "locale", "imageData", "filename" ], "expand": None, "logDetails": None }, "state": 1 } ], "size": None, "expand": None,          "startExpandIndex": None, "endExpandIndex": None }, "configuredParameters": [ "description", "languageImages" ] }
      result = json.dumps(sendobj, indent=2)
      resp, content = h.request('http://' + pressgang_host + ':8080/pressgang-ccms/rest/1/image/create/json?message=Initial+Image+Creation&flag=2&userId=89', method="POST", body=result, headers={'Content-Type':'application/json'})
      if resp['status'] == '200':
        imageid = json.loads(content)['id']
        imagearray[image] = imageid
        logentry (logfile, "Uploaded " + str(image) + " as image " + str(imageid) )
      else:
        print "Error: Bad Connection to Pressgang CCMS (Error code: " + resp['status'] + ")"
        exit ()
    current_progress += 1
    pbar.update(current_progress)
  pbar.finish()
  parser = etree.XMLParser(resolve_entities = False, dtd_validation = False, load_dtd = True)
  return imagearray

### MAIN FUNCTION

# INITIAL DEFINTIONS

dryrun = False
bookname = None
properties = etree.XMLParser(load_dtd = True, resolve_entities = True)
cspec = []
id_dict = {}
imagearray = {}
topicid_list = []
progress_log = []
test_topicid = 1
booktypes = ["book", "article"]
sectiontypes = ["part", "chapter", "appendix", "section"]
doctype = "<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">"
pressgang_host = "skynet.usersys.redhat.com"

# This variable contains the instructions in the user enters the wrong syntax
usage = """Usage: chopbook [options] book_name

Make sure you are in the same location as the publican.cfg file and the book_name refers to the main XML file in the en-US directory. If your main file is:

  en-US/Installation_Guide.xml

Then run:

  $ chopbook Installation_Guide

Options:
  --test-server     Migrate to the Pressgang test server
"""

# Pfft, we don't need SSL validation!
h = httplib2.Http(disable_ssl_certificate_validation=True)

# Get the CLI args
args = []
args = list(sys.argv)

# Pop the shell command name
shell = args.pop(0)

# Display help if no book_name
if len(args) < 1:
  print usage
  exit ()

# check args
while len(args) > 0:
  if args[0] == "--help" or args[0] == "-h":
    print usage
    exit ()
  elif args[0] == "--test-server":
    args.pop(0)
    pressgang_host = "skynet-dev.usersys.redhat.com"
  else:
    # set the filename
    bookname = args.pop(0)

print "Performing migration to " + pressgang_host

if bookname is None:
    print usage
    exit ()

try:
   with open('en-US/' + bookname + ".xml"): pass
except IOError:
   print 'Error: Book not found. Please check the book name and try again.'
   exit ()

pressgang_path = "./Pressgang/"
if os.path.exists(pressgang_path) is False:
  os.mkdir("Pressgang")
else:
  filelist = os.listdir(pressgang_path)
  for filename in filelist:
    if os.path.isdir(pressgang_path+"/"+filename):
      # delete folder
      shutil.rmtree(pressgang_path+"/"+filename)
    else:
      # delete file
      os.remove(pressgang_path+"/"+filename)
logfile = pressgang_path + "output.log"

logentry (logfile, "Starting " + bookname + " migration to Pressgang CCMS server: " + pressgang_host)

# Get the Book_Info.xml and publican.cfg
print "Extracting settings from Book_Info.xml and publican.cfg..."
logentry (logfile, "Extracting settings from Book_Info.xml and publican.cfg started")
cspec.extend (getbookinfo())
logentry (logfile, "Extracting settings from Book_Info.xml and publican.cfg completed")

# Parse the main book file into an xml etree
tree = loadxml('en-US/' + bookname + ".xml", properties)
book = tree.getroot()

# Remove the common content
for xiinclude in book:
  if "include" in str(xiinclude.tag) and (xiinclude.attrib['href'] == "Book_Info.xml" or xiinclude.attrib['href'] == "Article_Info.xml" or xiinclude.attrib['href'] == "Preface.xml" or xiinclude.attrib['href'] == "Revision_History.xml"):
    book.remove(xiinclude)

# Build a full xml tree of the book using the ix includes
print "Generating complete book xml with xincludes..."
logentry (logfile, "Generating complete book xml with xincludes started")
xixml(tree)
logentry (logfile, "Generating complete book xml with xincludes completed")

# Upload images
logentry (logfile, "Image upload started")
imagearray = uploadimages (book, h, logfile)
logentry (logfile, "Image upload complete")

# Calculate total topics
total_progress = 0
for section in book:
  if section.tag in sectiontypes:
    subsections = section.iter(sectiontypes)
    sectionlist = []
    for subsection in subsections:
      sectionlist.append(subsection)
    for sectionlistitem in sectionlist:
      total_progress += 1

# Create the topics and cspec tree
print "Creating " + str(total_progress) + " topics..."
logentry (logfile, "Topic creation started")
pbar = ProgressBar(widgets=[Percentage(), Bar()], maxval=total_progress).start()
current_progress = 0
for section in book:
  if section.tag in sectiontypes:
    subsections = section.iter(sectiontypes)
    sectionlist = []
    for subsection in subsections:
      sectionlist.append(subsection)
    for sectionlistitem in sectionlist:
      checksection = copy.deepcopy(sectionlistitem)
      subsectionexists = False
      for check in checksection:
        if check.tag in sectiontypes:
          checksection.remove(check)
          subsectionexists = True
      if subsectionexists is False and checksection.tag == "section":
        subsectiontitle = ""
      else:
        subsectiontitle = sectionlistitem.tag.capitalize() + ": "
      topicid, title, id = createtopic(checksection, dryrun, h)
      logentry (logfile, "Created topic " + str(topicid) + " - " + title)
      current_progress += 1
      pbar.update(current_progress)
      topicid_list.append(topicid)
      id_dict[topicid] = id
      str_topicid = " [" + str(topicid) + "]"
      cspec.append (("  " * (depth(sectionlistitem) - 2)) + subsectiontitle + title + str_topicid )
pbar.finish()
logentry (logfile, "Topic creation complete")

# Do a passthrough all topics and replace xrefs and images
print "Fixing xrefs and images..."
logentry (logfile, "xref and image fix started")
total_progress = len(topicid_list)
pbar = ProgressBar(widgets=[Percentage(), Bar()], maxval=total_progress).start()
current_progress = 0
for topicid in topicid_list:
  topic = gettopic(topicid, h)
  parser = etree.XMLParser(resolve_entities = False, dtd_validation = False, load_dtd = True)

  #
  # XREF CONVERSION
  # This was the toughest part of the whole script: converting the xrefs into Pressgang injections.
  # The problem was that the injection code is an XML comment, and replacing an xref in a comment resulted
  # in a comment-within-a-comment, which is illegal syntax. I tried all manner of regex combos having no luck.
  # Then I stumbled upon a slick solution:
  #
  # Convert the topic into an etree XML object

  xml = fromstring(doctype + topic, parser)
  # Iterate through the etree object and change "xref" tag labels to "xref_change". This skips over everything in comments.
  for xref in xml.iter("xref"):
    xref.tag = "xref_change"
  # Convert the etree object back to a string
  topic = tostring(xml)
  # Now it's just a matter of going through the topic, regex'ing the xref_change items, and changing them to the Pressgang injections.
  for xref_topicid, xref_ids in id_dict.items():
    for xref_id in xref_ids:
      #logentry (logfile, "Topic " + str(topicid) + ": Checking for xref " + str(xref_id))
      regexp = re.compile('<xref_change linkend="' + str(xref_id) + '".*/>')
      if regexp.search(topic) is not None:
        topic = re.sub('<xref_change linkend="' + str(xref_id) + '".*/>','<!-- Inject: ' + str(xref_topicid) + ' -->',topic)
        logentry (logfile, "Topic " + str(topicid) + ": Fixing xref for " + str(xref_id) + " - Linking to topic " + str(xref_topicid))
  # Finally replace any leftover xref_change tags with xrefs
  topic = re.sub('xref_change','xref',topic)

  # IMAGE CONVERSION
  #
  # This is pretty simple. Replace all image filenames with the Pressgang version ([image_id].png).

  filenames = re.compile(r'images/.*\.png')
  images = filenames.findall(topic)
  if len(images) != 0:
    for image in images:
      try:
        topic = re.sub(image, "images/" + str(imagearray[image]) + ".png",topic)
      except:
        pass
      else:
        logentry (logfile, "Topic " + str(topicid) + ": Changing image for " + image + " to images/" + str(imagearray[image]) + ".png")

  # UPDATE THE TOPIC
  #
  # Make sure all the changes get saved back to Pressgang

  logentry (logfile, "Topic " + str(topicid) + ": Updating")
  puttopic(topicid, topic, h)
  logentry (logfile, "Topic " + str(topicid) + ": Updated")

  current_progress += 1
  pbar.update(current_progress)
pbar.finish()
logentry (logfile, "xref and image fix complete")

# Save the content spec in a directory (./Pressgang/)
print "Saving file: "+ pressgang_path + bookname + ".cspec"
with open(pressgang_path + "/" + bookname + ".cspec", 'w') as file:
  for line in cspec:
    file.write(line + '\n')

logentry (logfile, "Book migration to Pressgang CCMS complete")

exit()